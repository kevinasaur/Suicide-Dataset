#%% md

Data Preparation

#%%

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
import plotly.express as px

data = pd.read_csv('master.csv')

##Analysis of Data showed that there were alot of Nulls in HDI. Replacing with Mean for analysis. Also dropping country year - not neccessary. 
data.drop("country-year", axis=1, inplace=True)
data.fillna(data.mean(), inplace=True)
data.head()

#%%

## Dropping countries with no data and removing 2016 (no data)
data[data.country != 'Dominica']
data[data.country != 'Saint Kitts and Nevis']
data[data.year != 2016]

#%%

## Number strings with commas into integers
data[" gdp_for_year ($) "] = data[" gdp_for_year ($) "].str.replace(",", "").astype("int")
data.info()

#%% md

Data Visualisation

#%%

##Review distribution of gender
sns.countplot(x='sex', data=data);
plt.title('Distribution of Gender');

#%%

##Distribution of Age
data['age'].value_counts().plot(kind='bar')
plt.title('Distribution of Age');

#%%

##Prevelance of Suicides among different age groups
age = data.loc[:,['year','age','suicides_no']]
age['total_suicides'] = age.groupby(['year','age'])['suicides_no'].transform('sum')
age.drop('suicides_no', axis=1, inplace=True)
age = age.drop_duplicates()
age = age[age['year']>=2000.0]
age = age.sort_values("year")
fig=px.bar(age,x='age', y="total_suicides", animation_frame="year", 
           animation_group="age", color="age", hover_name="age")
fig.show()

#%%

##Correlation Heat Map
sns.heatmap(data.corr(), annot=True)

#%%

## Relation between number of suicides and gdp_per_capita
fig = plt.figure(figsize=(20,7))
sns.scatterplot(data=data, x='gdp_per_capita ($)', y='suicides_no')

#%%

## Standardised graph of suicides vs 100k population
fig = plt.figure(figsize=(25,10))
sns.scatterplot('suicides/100k pop', 'population', hue='population', data=data);
plt.title('Suicides vs Suicides/100k pop, Colored by population');

#%% md

Preparation for K-Means Clustering Analysis

#%%

## Converting objects into numerical labels
data[["country","age","sex","generation"]] = data[["country","age","sex","generation"]].astype("category")
columns = data.select_dtypes(['category']).columns
data[columns] = data[columns].apply(lambda fx: fx.cat.codes)
data.dtypes

#%%

## Train and test model 
from sklearn import neighbors
from sklearn.datasets.samples_generator import make_blobs
from sklearn.cluster import KMeans
from mpl_toolkits.mplot3d import Axes3D

X = data.as_matrix(columns=['suicides_no'])
y = np.array(data['suicides_no'])

clf = neighbors.KNeighborsClassifier(3, weights = 'uniform')
trained_model = clf.fit(X, y)
trained_model.score(X, y)



#%%

from sklearn.metrics import silhouette_score
print(silhouette_score(X, y))

#%%


